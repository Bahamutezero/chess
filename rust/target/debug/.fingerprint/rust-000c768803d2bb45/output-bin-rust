{"message":"`if` may be missing an `else` clause","code":{"code":"E0317","explanation":"An `if` expression is missing an `else` block.\n\nErroneous code example:\n\n```compile_fail,E0317\nlet x = 5;\nlet a = if x == 5 {\n    1\n};\n```\n\nThis error occurs when an `if` expression without an `else` block is used in a\ncontext where a type other than `()` is expected. In the previous code example,\nthe `let` expression was expecting a value but since there was no `else`, no\nvalue was returned.\n\nAn `if` expression without an `else` block has the type `()`, so this is a type\nerror. To resolve it, add an `else` block having the same type as the `if`\nblock.\n\nSo to fix the previous code example:\n\n```\nlet x = 5;\nlet a = if x == 5 {\n    1\n} else {\n    2\n};\n```\n"},"level":"error","spans":[{"file_name":"src/piece.rs","byte_start":327,"byte_end":386,"line_start":26,"line_end":28,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if rep.len() != 2 {","highlight_start":9,"highlight_end":28},{"text":"            panic!(rep.len())","highlight_start":1,"highlight_end":30},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"expected `()`, found struct `Piece`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/tomo.ueda/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/rust-analyzer/lib/rustlib/src/rust/library/std/src/panic.rs","byte_start":889,"byte_end":934,"line_start":30,"line_end":32,"column_start":27,"column_end":6,"is_primary":false,"text":[{"text":"    ($msg:expr $(,)?) => ({","highlight_start":27,"highlight_end":28},{"text":"        $crate::rt::begin_panic($msg)","highlight_start":1,"highlight_end":38},{"text":"    }),","highlight_start":1,"highlight_end":6}],"label":"found here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/piece.rs","byte_start":359,"byte_end":376,"line_start":27,"line_end":27,"column_start":13,"column_end":30,"is_primary":false,"text":[{"text":"            panic!(rep.len())","highlight_start":13,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/piece.rs","byte_start":359,"byte_end":376,"line_start":27,"line_end":27,"column_start":13,"column_end":30,"is_primary":false,"text":[{"text":"            panic!(rep.len())","highlight_start":13,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"panic!","def_site_span":{"file_name":"/Users/tomo.ueda/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/rust-analyzer/lib/rustlib/src/rust/library/std/src/macros.rs","byte_start":466,"byte_end":681,"line_start":13,"line_end":19,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! panic {","highlight_start":1,"highlight_end":1},{"text":"    // Expands to either `$crate::panic::panic_2015` or `$crate::panic::panic_2021`","highlight_start":1,"highlight_end":1},{"text":"    // depending on the edition of the caller.","highlight_start":1,"highlight_end":1},{"text":"    ($($arg:tt)*) => {","highlight_start":1,"highlight_end":1},{"text":"        /* compiler built-in */","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::panic::panic_2015!","def_site_span":{"file_name":"/Users/tomo.ueda/.vim/bundle/YouCompleteMe/third_party/ycmd/third_party/rust-analyzer/lib/rustlib/src/rust/library/std/src/panic.rs","byte_start":769,"byte_end":1056,"line_start":26,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub macro panic_2015 {","highlight_start":1,"highlight_end":1},{"text":"    () => ({","highlight_start":1,"highlight_end":1},{"text":"        $crate::rt::begin_panic(\"explicit panic\")","highlight_start":1,"highlight_end":1},{"text":"    }),","highlight_start":1,"highlight_end":1},{"text":"    ($msg:expr $(,)?) => ({","highlight_start":1,"highlight_end":1},{"text":"        $crate::rt::begin_panic($msg)","highlight_start":1,"highlight_end":1},{"text":"    }),","highlight_start":1,"highlight_end":1},{"text":"    ($fmt:expr, $($arg:tt)+) => ({","highlight_start":1,"highlight_end":1},{"text":"        $crate::rt::begin_panic_fmt(&$crate::format_args!($fmt, $($arg)+))","highlight_start":1,"highlight_end":1},{"text":"    }),","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`if` expressions without `else` evaluate to `()`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider adding an `else` block that evaluates to the expected type","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0317]\u001b[0m\u001b[0m\u001b[1m: `if` may be missing an `else` clause\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/piece.rs:26:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if rep.len() != 2 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            panic!(rep.len())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfound here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `()`, found struct `Piece`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `if` expressions without `else` evaluate to `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider adding an `else` block that evaluates to the expected type\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/board.rs","byte_start":324,"byte_end":326,"line_start":16,"line_end":16,"column_start":19,"column_end":21,"is_primary":true,"text":[{"text":"            board:[]","highlight_start":19,"highlight_end":21}],"label":"expected an array with a fixed size of 64 elements, found one with 0 elements","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected array `[Option<Piece>; 64]`\n   found array `[_; 0]`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/board.rs:16:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            board:[]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected an array with a fixed size of 64 elements, found one with 0 elements\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected array `\u001b[0m\u001b[0m\u001b[1m[Option<Piece>; 64]\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found array `\u001b[0m\u001b[0m\u001b[1m[_; 0]\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0308, E0317.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0317.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
